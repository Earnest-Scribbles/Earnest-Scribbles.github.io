---
import { render, getCollection } from "astro:content";
import MarkdownPostLayout from "../../../layouts/MarkdownPostLayout.astro";
import Prose from "../../../components/Prose.astro";

export async function getStaticPaths() {
  const chapterEntries = await getCollection('notebooks', ({ data }) => !data.isIndex);

  return chapterEntries.map(entry => {
    const [slug, ...chapterParts] = entry.id.split('/');
    const chapter = chapterParts.length > 0 ? chapterParts.join('/') : undefined; // Ensure `undefined` if no chapter

    return {
      params: { slug, chapter },
      props: { entry },
    };
  });
}

// Fetch the current chapter and its content
const { entry } = Astro.props;
const { Content } = await render(entry);

// Extract the notebook slug from the entry.id
const notebookSlug = entry.id.split('/')[0];

// Get all chapters for the current notebook (using notebookSlug to filter relevant chapters)
const chapterEntries = await getCollection('notebooks', ({ data, id }) => {
  const chapterSlug = id.split('/')[0]; // Extract the notebook slug from each chapter's id
  return !data.isIndex && notebookSlug === chapterSlug; // Filter by matching notebook slug
});

// Sort the chapters by their chapter order (if available)
const chapters = chapterEntries.sort((a, b) => (a.data.chapter || 0) - (b.data.chapter || 0));

// Find the current chapter's index within the filtered chapters
const currentChapterIndex = chapters.findIndex((chapter) => chapter.id === entry.id);

// Get the previous and next chapters
const prevChapter = currentChapterIndex > 0 ? chapters[currentChapterIndex - 1] : null;
const nextChapter = currentChapterIndex < chapters.length - 1 ? chapters[currentChapterIndex + 1] : null;

---

<MarkdownPostLayout frontmatter={entry.data} type="notebook">
  <Prose type="notebook">
    <Content />
  </Prose>

  <!-- Index Button in Top Right Corner -->
  {entry.data.chapter && (
    <div class="absolute top-6 right-6">
      <button class="transform hover:scale-105 transition-transform duration-200 ease-in-out">
        <a href={`/notebook/${entry.id.split('/')[0]}`} class="text-xs lg:text-base text-gray-500 border-t-2 border-r-2 border-l-2 border-dashed font-bold font-title px-2 sm:px-6 py-2 border-gray-400">
          GO TO INDEX
        </a>
      </button>
    </div>
  )}

  <!-- Navigation Buttons -->
  <div class="flex justify-between mt-6">
    <!-- Back Button (Aligns to the Left) -->
    {prevChapter && (
      <div class="self-start">
        <button class="transform hover:scale-105 transition-transform duration-200 ease-in-out">
          <a href={`/notebook/${prevChapter.id}`} class="text-base text-gray-500 border-2 border-dashed rounded-lg font-bold font-title px-6 py-2 border-gray-400">
            BACK
          </a>
        </button>
      </div>
    )}

    <!-- Next Button (Aligns to the Right) -->
    {nextChapter && (
      <div class="self-end ml-auto">
        <button class="transform hover:scale-105 transition-transform duration-200 ease-in-out">
          <a href={`/notebook/${nextChapter.id}`} class="text-base text-gray-500 border-2 border-dashed rounded-lg font-bold font-title px-6 py-2 border-gray-400">
            NEXT
          </a>
        </button>
      </div>
    )}
  </div>
</MarkdownPostLayout>